package apa.impl;

import apa.*;


import java.net.URI;
import java.util.Collection;
import javax.xml.datatype.XMLGregorianCalendar;

import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.WrappedIndividualImpl;

import org.protege.owl.codegeneration.inference.CodeGenerationInference;

import org.semanticweb.owlapi.model.IRI;
import org.semanticweb.owlapi.model.OWLOntology;


/**
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: DefaultService <br>
 * @version generated on Wed Jan 20 15:20:39 CST 2016 by jovizhu
 */
public class DefaultService extends WrappedIndividualImpl implements Service {

    public DefaultService(CodeGenerationInference inference, IRI iri) {
        super(inference, iri);
    }





    /* ***************************************************
     * Object Property http://www.semanticweb.org/james/ontologies/2015/0/untitled-ontology-15#hasMicroCFD
     */
     
    public Collection<? extends MicroCFD> getHasMicroCFD() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASMICROCFD,
                                               DefaultMicroCFD.class);
    }

    public boolean hasHasMicroCFD() {
	   return !getHasMicroCFD().isEmpty();
    }

    public void addHasMicroCFD(MicroCFD newHasMicroCFD) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASMICROCFD,
                                       newHasMicroCFD);
    }

    public void removeHasMicroCFD(MicroCFD oldHasMicroCFD) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASMICROCFD,
                                          oldHasMicroCFD);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/james/ontologies/2015/0/untitled-ontology-15#hasMicroService
     */
     
    public Collection<? extends MService> getHasMicroService() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASMICROSERVICE,
                                               DefaultMService.class);
    }

    public boolean hasHasMicroService() {
	   return !getHasMicroService().isEmpty();
    }

    public void addHasMicroService(MService newHasMicroService) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASMICROSERVICE,
                                       newHasMicroService);
    }

    public void removeHasMicroService(MService oldHasMicroService) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASMICROSERVICE,
                                          oldHasMicroService);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/james/ontologies/2015/0/untitled-ontology-15#hasSCF
     */
     
    public Collection<? extends SCF> getHasSCF() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_HASSCF,
                                               DefaultSCF.class);
    }

    public boolean hasHasSCF() {
	   return !getHasSCF().isEmpty();
    }

    public void addHasSCF(SCF newHasSCF) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_HASSCF,
                                       newHasSCF);
    }

    public void removeHasSCF(SCF oldHasSCF) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_HASSCF,
                                          oldHasSCF);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/james/ontologies/2015/0/untitled-ontology-15#performAt
     */
     
    public Collection<? extends Facility> getPerformAt() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_PERFORMAT,
                                               DefaultFacility.class);
    }

    public boolean hasPerformAt() {
	   return !getPerformAt().isEmpty();
    }

    public void addPerformAt(Facility newPerformAt) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_PERFORMAT,
                                       newPerformAt);
    }

    public void removePerformAt(Facility oldPerformAt) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_PERFORMAT,
                                          oldPerformAt);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/james/ontologies/2015/0/untitled-ontology-15#produces
     */
     
    public Collection<? extends Product> getProduces() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_PRODUCES,
                                               DefaultProduct.class);
    }

    public boolean hasProduces() {
	   return !getProduces().isEmpty();
    }

    public void addProduces(Product newProduces) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_PRODUCES,
                                       newProduces);
    }

    public void removeProduces(Product oldProduces) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_PRODUCES,
                                          oldProduces);
    }


    /* ***************************************************
     * Object Property http://www.semanticweb.org/james/ontologies/2015/0/untitled-ontology-15#uses
     */
     
    public Collection<? extends Equipment> getUses() {
        return getDelegate().getPropertyValues(getOwlIndividual(),
                                               Vocabulary.OBJECT_PROPERTY_USES,
                                               DefaultEquipment.class);
    }

    public boolean hasUses() {
	   return !getUses().isEmpty();
    }

    public void addUses(Equipment newUses) {
        getDelegate().addPropertyValue(getOwlIndividual(),
                                       Vocabulary.OBJECT_PROPERTY_USES,
                                       newUses);
    }

    public void removeUses(Equipment oldUses) {
        getDelegate().removePropertyValue(getOwlIndividual(),
                                          Vocabulary.OBJECT_PROPERTY_USES,
                                          oldUses);
    }


}
